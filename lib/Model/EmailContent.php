<?php
/**
 * EmailContent
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Cakemail API
 *
 * The Cakemail API exposes multiple APIs including Authentication, Marketing, Contact, Transactional, Analytic, Content, Account and Partner.
 *
 * OpenAPI spec version: 1.0.3
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.20
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * EmailContent Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailContent implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EmailContent';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'subject' => 'string',
'html' => 'string',
'text' => 'string',
'encoding' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'subject' => null,
'html' => null,
'text' => null,
'encoding' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'subject' => 'subject',
'html' => 'html',
'text' => 'text',
'encoding' => 'encoding'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'subject' => 'setSubject',
'html' => 'setHtml',
'text' => 'setText',
'encoding' => 'setEncoding'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'subject' => 'getSubject',
'html' => 'getHtml',
'text' => 'getText',
'encoding' => 'getEncoding'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const ENCODING_UTF_8 = 'utf-8';
const ENCODING_ARMSCII_8 = 'armscii-8';
const ENCODING_ASCII = 'ascii';
const ENCODING_BIG_5 = 'big-5';
const ENCODING_CP51932 = 'cp51932';
const ENCODING_CP866 = 'cp866';
const ENCODING_CP936 = 'cp936';
const ENCODING_EUC_CN = 'euc-cn';
const ENCODING_EUC_JP = 'euc-jp';
const ENCODING_EUCJP_WIN = 'eucjp-win';
const ENCODING_EUC_KR = 'euc-kr';
const ENCODING_EUC_TW = 'euc-tw';
const ENCODING_HZ = 'hz';
const ENCODING_ISO_2022_JP = 'iso-2022-jp';
const ENCODING_ISO_2022_JP_MS = 'iso-2022-jp-ms';
const ENCODING_ISO_2022_KR = 'iso-2022-kr';
const ENCODING_ISO_8859_1 = 'iso-8859-1';
const ENCODING_ISO_8859_10 = 'iso-8859-10';
const ENCODING_ISO_8859_13 = 'iso-8859-13';
const ENCODING_ISO_8859_14 = 'iso-8859-14';
const ENCODING_ISO_8859_15 = 'iso-8859-15';
const ENCODING_ISO_8859_16 = 'iso-8859-16';
const ENCODING_ISO_8859_2 = 'iso-8859-2';
const ENCODING_ISO_8859_3 = 'iso-8859-3';
const ENCODING_ISO_8859_4 = 'iso-8859-4';
const ENCODING_ISO_8859_5 = 'iso-8859-5';
const ENCODING_ISO_8859_6 = 'iso-8859-6';
const ENCODING_ISO_8859_7 = 'iso-8859-7';
const ENCODING_ISO_8859_8 = 'iso-8859-8';
const ENCODING_ISO_8859_9 = 'iso-8859-9';
const ENCODING_JIS = 'jis';
const ENCODING_KOI8_R = 'koi8-r';
const ENCODING_SJIS = 'sjis';
const ENCODING_SJIS_WIN = 'sjis-win';
const ENCODING_UHC = 'uhc';
const ENCODING_WINDOWS_1251 = 'windows-1251';
const ENCODING_WINDOWS_1252 = 'windows-1252';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getEncodingAllowableValues()
    {
        return [
            self::ENCODING_UTF_8,
self::ENCODING_ARMSCII_8,
self::ENCODING_ASCII,
self::ENCODING_BIG_5,
self::ENCODING_CP51932,
self::ENCODING_CP866,
self::ENCODING_CP936,
self::ENCODING_EUC_CN,
self::ENCODING_EUC_JP,
self::ENCODING_EUCJP_WIN,
self::ENCODING_EUC_KR,
self::ENCODING_EUC_TW,
self::ENCODING_HZ,
self::ENCODING_ISO_2022_JP,
self::ENCODING_ISO_2022_JP_MS,
self::ENCODING_ISO_2022_KR,
self::ENCODING_ISO_8859_1,
self::ENCODING_ISO_8859_10,
self::ENCODING_ISO_8859_13,
self::ENCODING_ISO_8859_14,
self::ENCODING_ISO_8859_15,
self::ENCODING_ISO_8859_16,
self::ENCODING_ISO_8859_2,
self::ENCODING_ISO_8859_3,
self::ENCODING_ISO_8859_4,
self::ENCODING_ISO_8859_5,
self::ENCODING_ISO_8859_6,
self::ENCODING_ISO_8859_7,
self::ENCODING_ISO_8859_8,
self::ENCODING_ISO_8859_9,
self::ENCODING_JIS,
self::ENCODING_KOI8_R,
self::ENCODING_SJIS,
self::ENCODING_SJIS_WIN,
self::ENCODING_UHC,
self::ENCODING_WINDOWS_1251,
self::ENCODING_WINDOWS_1252,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['subject'] = isset($data['subject']) ? $data['subject'] : null;
        $this->container['html'] = isset($data['html']) ? $data['html'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['encoding'] = isset($data['encoding']) ? $data['encoding'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['subject'] === null) {
            $invalidProperties[] = "'subject' can't be null";
        }
        if ($this->container['encoding'] === null) {
            $invalidProperties[] = "'encoding' can't be null";
        }
        $allowedValues = $this->getEncodingAllowableValues();
        if (!is_null($this->container['encoding']) && !in_array($this->container['encoding'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'encoding', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets subject
     *
     * @return string
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string $subject subject
     *
     * @return $this
     */
    public function setSubject($subject)
    {
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets html
     *
     * @return string
     */
    public function getHtml()
    {
        return $this->container['html'];
    }

    /**
     * Sets html
     *
     * @param string $html html
     *
     * @return $this
     */
    public function setHtml($html)
    {
        $this->container['html'] = $html;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets encoding
     *
     * @return string
     */
    public function getEncoding()
    {
        return $this->container['encoding'];
    }

    /**
     * Sets encoding
     *
     * @param string $encoding encoding
     *
     * @return $this
     */
    public function setEncoding($encoding)
    {
        $allowedValues = $this->getEncodingAllowableValues();
        if (!in_array($encoding, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'encoding', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['encoding'] = $encoding;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
